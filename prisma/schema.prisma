generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  active       Boolean        @default(true)
  username     String         @unique
  password     String
  role         String         @default("USER")
  refreshToken RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Blob {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  dailyView   Int      @default(0)
  description String?
  Filter      Filter[]

  @@index([name])
}

model Setting {
  key String @id
  value String
}

model Filter {
  id        Int      @id @default(autoincrement())
  blobId    Int
  inclusive Boolean  @default(false)
  blob      Blob     @relation(fields: [blobId], references: [id], onDelete: Cascade)
  sources   Source[] @relation("FilterToSource")
  tags      Tag[]    @relation("FilterToTag")

  @@index([blobId], map: "Filter_blobId_fkey")
}

model Post {
  id        Int       @id @default(autoincrement())
  date      DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String    @default("")
  content   String?
  summary   String?
  URL       String    @unique
  image     String?
  sourceId  Int
  source    Source    @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  tags      Tag[]     @relation("PostToTag")

  @@index([sourceId], map: "Post_sourceId_fkey")
}

model Tag {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Filter Filter[] @relation("FilterToTag")
  posts  Post[]   @relation("PostToTag")

  @@index([name])
}

model Source {
  id          Int       @id @default(autoincrement())
  name        String
  type        String    @default("FEED")
  URL         String    @unique
  updatedAt   DateTime? @default(now())
  ETag        String?
  createdAt   DateTime  @default(now())
  lastError   String?
  status      String    @default("OK")
  nErrors     Int       @default(0)
  description String?
  image       String?
  link        String?
  Log         Log[]
  posts       Post[]
  Filter      Filter[]  @relation("FilterToSource")
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  sourceId  Int
  type      String?  //
  message   String?
  level     String   @default("INFO") // WARNING, ERROR, INFO, DEBUG
  source    Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}
