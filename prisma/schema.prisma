generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  active      Boolean @default(true)
  username    String  @unique
  password    String
  role        String  @default("USER") // USER / ADMIMN

  // Refresh token
  refreshToken RefreshToken[]
}


model RefreshToken {
  id    String @id @default(uuid())
  token String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Blob {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  dailyView   Int      @default(0)
  description String?
  Filter      Filter[]
}

model Filter {
  id       Int    @id @default(autoincrement())
  blobId   Int
  blob     Blob   @relation(fields: [blobId], references: [id], onDelete: Cascade)
  sourceId Int
  source   Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  tagId    Int?
  tag      Tag?   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([blobId, sourceId, tagId])
}

model Post {
  id        Int       @id @default(autoincrement())
  date      DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String    @default("")
  content   String?
  summary   String?
  URL       String    @unique
  image     String?
  sourceId  Int
  tags      Tag[]
  source    Source    @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  // @@index([sourceId], map: "Post_sourceId_fkey")
}

model Tag {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  posts  Post[]
  Filter Filter[]
}

model Source {
  id          Int       @id @default(autoincrement())
  name        String
  type        String    @default("FEED")
  URL         String    @unique
  updatedAt   DateTime? @default(now())
  ETag        String?
  createdAt   DateTime  @default(now())
  lastError   String?
  status      String    @default("OK")
  nErrors     Int       @default(0)
  description String?
  image       String?
  link        String?
  posts       Post[]
  Filter      Filter[]
  Log         Log[]
}

model Log {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  sourceId    Int
  source      Source    @relation(fields: [sourceId], references: [id])
  message     String?
  level       String    @default("INFO")
  context     String?
}
